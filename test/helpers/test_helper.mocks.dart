// Mocks generated by Mockito 5.1.0 from annotations
// in fita_music_app/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:convert' as _i10;
import 'dart:typed_data' as _i11;

import 'package:dartz/dartz.dart' as _i2;
import 'package:fita_music_app/common/failure.dart' as _i6;
import 'package:fita_music_app/data/datasource/music_remote_datasource.dart'
    as _i8;
import 'package:fita_music_app/data/model/music_model.dart' as _i9;
import 'package:fita_music_app/domain/entities/music.dart' as _i7;
import 'package:fita_music_app/domain/repositories/music_repository.dart'
    as _i4;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeResponse_1 extends _i1.Fake implements _i3.Response {}

class _FakeStreamedResponse_2 extends _i1.Fake implements _i3.StreamedResponse {
}

/// A class which mocks [MusicRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMusicRepository extends _i1.Mock implements _i4.MusicRepository {
  MockMusicRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.Music>>> getMusicList() =>
      (super.noSuchMethod(Invocation.method(#getMusicList, []),
          returnValue: Future<_i2.Either<_i6.Failure, List<_i7.Music>>>.value(
              _FakeEither_0<_i6.Failure, List<_i7.Music>>())) as _i5
          .Future<_i2.Either<_i6.Failure, List<_i7.Music>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.Music>>> searchMusic(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMusic, [query]),
          returnValue: Future<_i2.Either<_i6.Failure, List<_i7.Music>>>.value(
              _FakeEither_0<_i6.Failure, List<_i7.Music>>())) as _i5
          .Future<_i2.Either<_i6.Failure, List<_i7.Music>>>);
}

/// A class which mocks [MusicRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMusicRemoteDataSource extends _i1.Mock
    implements _i8.MusicRemoteDataSource {
  MockMusicRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i9.MusicModel>> getMusicList() => (super.noSuchMethod(
          Invocation.method(#getMusicList, []),
          returnValue: Future<List<_i9.MusicModel>>.value(<_i9.MusicModel>[]))
      as _i5.Future<List<_i9.MusicModel>>);
  @override
  _i5.Future<List<_i9.MusicModel>> searchMusic(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMusic, [query]),
              returnValue:
                  Future<List<_i9.MusicModel>>.value(<_i9.MusicModel>[]))
          as _i5.Future<List<_i9.MusicModel>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i3.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i5.Future<_i3.Response>);
  @override
  _i5.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i11.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i5.Future<_i11.Uint8List>);
  @override
  _i5.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_2()))
          as _i5.Future<_i3.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
